{"version":3,"file":"static/js/39.9a3f47f3.chunk.js","mappings":"0OAcMA,EAAiB,SAACC,GACpB,OAAQA,GACJ,IAAK,YACD,MAAO,WAEX,IAAK,aACD,MAAO,WAEX,IAAK,WACD,MAAO,UAEX,IAAK,WACD,MAAO,UAEX,IAAK,UACD,MAAO,SAEX,IAAK,WACD,MAAO,UAEX,QACI,MAAM,IAAIC,MAAJ,2BAA8BD,IAE/C,EAaKE,EAAmB,SACrBC,GAEA,IAAMC,GAAaC,EAAAA,EAAAA,GAAkBF,GAErC,OAAO,SAACG,EAAMN,EAAUO,GACpB,OAAID,IAASE,EAAAA,GACF,CACHC,OAAOC,EAAAA,EAAAA,IAAF,mKAAuBV,EAChBA,GAIZW,UAAW,CAAEC,GAAIL,EAAOK,IACxBC,cAAe,YACX,GADiD,EAAnCC,KACL,SAAD,OAAUd,IACd,MAAO,CAAEc,KAAM,CAAEF,GAAIL,EAAOK,KAGhC,MAAM,IAAIX,MAAJ,2BAA8BD,GACvC,GAIFI,EAAWE,EAAMN,EAAUO,EACrC,CACJ,EAED,0BAAe,qGACgBQ,EAAAA,EAAAA,GAAkB,CACzCC,cAAe,CACXC,IAAK,iCAETC,cAAe,CACXC,gBAAe,UACVX,EAAAA,IAAS,SAACR,GAAD,sBACGA,EAASoB,KADZ,KAIlBhB,WAAYF,IAXL,cACLmB,EADK,yBAcJ,IAAIC,MAAoBC,EAAqB,CAChDC,IAAK,SAACC,EAAQL,GACV,GAAoB,kBAATA,GAA8B,SAATA,EAGhC,0CAAO,WAAOpB,EAAkBO,GAAzB,0FACIc,EAAaD,GAAMrB,EAAeC,GAAWO,IADjD,2CAAP,uDAGH,KAtBM,2CA0Bf,IAAMgB,EAAoC,CACtCG,OAAQ,kBAAMC,QAAQC,OAAO,CAAEd,KAAM,MAA7B,EACRe,OAAQ,kBAAMF,QAAQC,OAAO,CAAEd,KAAM,MAA7B,EACRgB,WAAY,kBAAMH,QAAQI,QAAQ,CAAEjB,KAAM,IAA9B,EACZkB,QAAS,kBAAML,QAAQI,QAAQ,CAAEjB,KAAM,GAAImB,MAAO,GAAzC,EACTC,QAAS,kBAAMP,QAAQI,QAAQ,CAAEjB,KAAM,IAA9B,EACTqB,iBAAkB,kBAAMR,QAAQI,QAAQ,CAAEjB,KAAM,GAAImB,MAAO,GAAzC,EAClBG,OAAQ,kBAAMT,QAAQC,OAAO,CAAEd,KAAM,MAA7B,EACRuB,OAAQ,kBAAMV,QAAQC,OAAO,CAAEd,KAAM,MAA7B,EACRwB,WAAY,kBAAMX,QAAQI,QAAQ,CAAEjB,KAAM,IAA9B,E","sources":["dataProvider/graphql.ts"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\nimport { ApolloQueryResult } from '@apollo/client';\nimport buildApolloClient, {\n    buildQuery as buildQueryFactory,\n} from 'ra-data-graphql-simple';\nimport { BuildQuery } from 'ra-data-graphql';\nimport { DataProvider, DELETE } from 'react-admin';\nimport gql from 'graphql-tag';\nimport {\n    IntrospectionField,\n    IntrospectionSchema,\n    IntrospectionType,\n} from 'graphql';\n\nconst getGqlResource = (resource: string) => {\n    switch (resource) {\n        case 'customers':\n            return 'Customer';\n\n        case 'categories':\n            return 'Category';\n\n        case 'commands':\n            return 'Command';\n\n        case 'products':\n            return 'Product';\n\n        case 'reviews':\n            return 'Review';\n\n        case 'invoices':\n            return 'Invoice';\n\n        default:\n            throw new Error(`Unknown resource ${resource}`);\n    }\n};\n\ntype IntrospectionResource = IntrospectionType & {\n    [key: string]: IntrospectionField;\n};\n\ninterface IntrospectionResults {\n    types: IntrospectionType[];\n    queries: IntrospectionField[];\n    resources: IntrospectionResource[];\n    schema: IntrospectionSchema;\n}\n\nconst customBuildQuery = (\n    introspectionResults: IntrospectionResults\n): BuildQuery => {\n    const buildQuery = buildQueryFactory(introspectionResults);\n\n    return (type, resource, params) => {\n        if (type === DELETE) {\n            return {\n                query: gql`mutation remove${resource}($id: ID!) {\n                    remove${resource}(id: $id) {\n                        id\n                    }\n                }`,\n                variables: { id: params.id },\n                parseResponse: ({ data }: ApolloQueryResult<any>) => {\n                    if (data[`remove${resource}`]) {\n                        return { data: { id: params.id } };\n                    }\n\n                    throw new Error(`Could not delete ${resource}`);\n                },\n            };\n        }\n\n        return buildQuery(type, resource, params);\n    };\n};\n\nexport default async () => {\n    const dataProvider = await buildApolloClient({\n        clientOptions: {\n            uri: 'http://localhost:4000/graphql',\n        },\n        introspection: {\n            operationNames: {\n                [DELETE]: (resource: IntrospectionType) =>\n                    `remove${resource.name}`,\n            },\n        },\n        buildQuery: customBuildQuery,\n    });\n\n    return new Proxy<DataProvider>(defaultDataProvider, {\n        get: (target, name) => {\n            if (typeof name === 'symbol' || name === 'then') {\n                return;\n            }\n            return async (resource: string, params: any) => {\n                return dataProvider[name](getGqlResource(resource), params);\n            };\n        },\n    });\n};\n// Only used to initialize proxy\nconst defaultDataProvider: DataProvider = {\n    create: () => Promise.reject({ data: null }), // avoids adding a context in tests\n    delete: () => Promise.reject({ data: null }), // avoids adding a context in tests\n    deleteMany: () => Promise.resolve({ data: [] }), // avoids adding a context in tests\n    getList: () => Promise.resolve({ data: [], total: 0 }), // avoids adding a context in tests\n    getMany: () => Promise.resolve({ data: [] }), // avoids adding a context in tests\n    getManyReference: () => Promise.resolve({ data: [], total: 0 }), // avoids adding a context in tests\n    getOne: () => Promise.reject({ data: null }), // avoids adding a context in tests\n    update: () => Promise.reject({ data: null }), // avoids adding a context in tests\n    updateMany: () => Promise.resolve({ data: [] }), // avoids adding a context in tests\n};\n"],"names":["getGqlResource","resource","Error","customBuildQuery","introspectionResults","buildQuery","buildQueryFactory","type","params","DELETE","query","gql","variables","id","parseResponse","data","buildApolloClient","clientOptions","uri","introspection","operationNames","name","dataProvider","Proxy","defaultDataProvider","get","target","create","Promise","reject","delete","deleteMany","resolve","getList","total","getMany","getManyReference","getOne","update","updateMany"],"sourceRoot":""}